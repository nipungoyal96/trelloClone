{"version":3,"sources":["store/actions/addLists.js","components/TextEditor.js","components/Card.js","store/actions/addCard.js","components/CardContainer.js","components/Lists.js","App.js","store/reducer/addLists.js","store/reducer/addCard.js","serviceWorker.js","index.js"],"names":["addLists","payload","type","TextEditor","props","className","value","onChange","setTextField","onClick","firstButtonClick","firstButtonText","secondButtonClick","secondButtonText","Card","useState","editable","setEditable","editing","setEditing","text","setText","dispatch","useDispatch","hoverTrue","hoverFalse","e","target","listId","cardId","index","onDelete","key","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","onMouseEnter","onMouseLeave","icon","faPencilAlt","CardContainer","cards","useSelector","state","cardDelted","setCardDelted","addCard","setAddCard","newCardText","setNewCardText","addNewCard","addCardToList","Date","now","toString","cancelCard","changeTitle","setEditTitle","doneEditingTitle","title","deleteList","onDeleteList","setTitle","editTitle","faCheck","faTrash","droppableId","_snapshot","map","card","placeholder","Lists","addNewList","addListsAction","listDeleted","setListDeleted","lists","onDragEnd","source","destination","addCardAction","sourceListId","destinationListId","oldCardIndex","newCardIndex","oldListIndex","newListIndex","direction","droppableProps","list","App","intialState","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","concat","newList","splice","removedListItems","newLists","newListItem","console","log","newCards","removedCards","sourceCards","removedCard","destinationCards","newCard","newCardItem","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94a3410e.chunk.js","sourcesContent":["\r\n\r\nexport const ADD_LISTS = 'ADD_LISTS';\r\n\r\nexport const MOVE_LISTS = 'MOVE_LISTS';\r\nexport const UPDATE_TITLE = 'UPDATE_TITLE'\r\nexport const DELETE_LISTS = 'DELETE_LISTS';\r\nexport const addLists = (payload) =>{\r\n   \r\n    return{\r\n        type:ADD_LISTS,\r\n        payload:payload\r\n    }\r\n}\r\n\r\nexport const moveLists = (payload) =>{\r\n   \r\n    return{\r\n        type:MOVE_LISTS,\r\n        payload:payload\r\n    }\r\n}\r\n\r\nexport const updateTitle = (payload) =>{\r\n    return{\r\n        type:UPDATE_TITLE,\r\n        payload:payload\r\n    }\r\n}\r\n\r\nexport const deleteList = (index) =>{\r\n    \r\n    return{\r\n        type:DELETE_LISTS,\r\n        index:index\r\n    }\r\n}","import React from 'react'\r\nimport './styles/textEditor.css'\r\n\r\nconst TextEditor = (props) =>{\r\n\r\nreturn(<div className=\"textInputContainer\">\r\n<input type=\"text\" className=\"textInput\" value={props.value} onChange={props.setTextField}/>\r\n    <div className=\"buttonContainer\">\r\n    <button className=\"ButtonSave\" onClick={props.firstButtonClick}>{props.firstButtonText}</button>\r\n    <button className=\"ButtonCancel\" onClick={props.secondButtonClick}>{props.secondButtonText}</button>\r\n    </div>\r\n    </div>)\r\n}\r\n\r\nexport default TextEditor","import './styles/card.css';\r\n\r\nimport React,{useState} from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport {useDispatch} from 'react-redux';\r\nimport TextEditor from './TextEditor';\r\n\r\nimport * as addCardAction from '../store/actions/addCard';\r\n\r\nconst Card=(props)=>{\r\n    const [editable,setEditable] = useState(false)\r\n    const [editing,setEditing] = useState(false)\r\n    const [text,setText] = useState(props.text)\r\n    const dispatch = useDispatch();\r\n    const hoverTrue=()=>{\r\n        setEditable(true)\r\n    }\r\n    const hoverFalse=()=>{\r\n        setEditable(false)\r\n    }\r\n\r\n    const deleteCard = () =>{\r\n        setEditing(false);\r\n      \r\n     dispatch(addCardAction.deleteCard({\r\n         listId:props.listId,\r\n         index:props.index\r\n     }))\r\n     props.onDelete();\r\n    }\r\n    const saveText=()=>{\r\n        setEditing(false);\r\n      \r\n     dispatch(addCardAction.editCard({\r\n         listId:props.listId,\r\n         cardId:props.cardId,\r\n         text:text,\r\n         index:props.index\r\n     }))\r\n    }\r\n    if(editing ) return(\r\n    <div>\r\n        <TextEditor firstButtonText=\"Save\" secondButtonText=\"Delete\" value={text} setTextField={(e)=> setText(e.target.value)} firstButtonClick={saveText} secondButtonClick={deleteCard}/>\r\n    </div>\r\n\r\n    ) \r\n    return(\r\n        <Draggable key={props.cardId} draggableId={props.cardId} index={props.index} >\r\n        {(provided, snapshot) => (\r\n        <div className=\"Card\" {...provided.draggableProps}\r\n        {...provided.dragHandleProps}\r\n              ref={provided.innerRef}\r\n              onMouseEnter={hoverTrue}\r\n        onMouseLeave={hoverFalse}\r\n              >\r\n            \r\n            {editable && <div className=\"Card-Icons\">\r\n                  <div className=\"Card-Icon\" >\r\n                  <FontAwesomeIcon onClick={()=>setEditing(true)} icon={faPencilAlt} />\r\n                  </div>\r\n            </div>}\r\n            {text}\r\n        </div>)}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Card;","export const ADD_CARD = 'ADD_CARD';\r\n\r\nexport const MOVE_CARD = 'MOVE_CARD';\r\nexport const EDIT_CARD = 'EDIT_CARD';\r\nexport const DELETE_CARD = 'DELETE_CARD';\r\n\r\n\r\nexport const addCard = (listId,payload) =>{\r\n\r\n    return{\r\n        type:ADD_CARD,\r\n        listId:listId,\r\n        payload:payload\r\n    }\r\n}\r\n\r\nexport const moveCard = (payload) => {\r\n    return{\r\n        type:MOVE_CARD,\r\n        payload:payload\r\n    }\r\n}\r\n\r\nexport const editCard=(payload)=>{\r\n    return{\r\n        type:EDIT_CARD,\r\n        payload:payload\r\n    }\r\n}\r\n\r\nexport const deleteCard=(payload)=>{\r\n    return{\r\n        type:DELETE_CARD,\r\n        payload:payload\r\n    }\r\n}","import './styles/cardContainer.css';\r\n\r\nimport React, {  useState } from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck,faTrash} from '@fortawesome/free-solid-svg-icons'\r\nimport {Draggable,Droppable} from 'react-beautiful-dnd'\r\n\r\nimport Card from './Card';\r\nimport * as addCardAction from '../store/actions/addCard';\r\nimport * as addListAction from '../store/actions/addLists';\r\n\r\nimport TextEditor from './TextEditor';\r\n\r\nconst CardContainer = (props) => {\r\n    const dispatch=useDispatch();\r\n    const cards=useSelector(state=>state.cards[props.listId]);\r\n   \r\n    const [cardDelted,setCardDelted] = useState(false);\r\n    if(cardDelted){\r\n        setCardDelted(false)\r\n    }\r\n    \r\n    const [addCard,setAddCard] = useState(false);\r\n    const [newCardText,setNewCardText] = useState('');\r\n    const addNewCard = () => {\r\n         setAddCard(true)\r\n    }\r\n\r\n    const addCardToList = () => {\r\n        setAddCard(false);\r\n       \r\n        dispatch(addCardAction.addCard(props.listId,{\r\n            cardId:Date.now().toString(),text:newCardText\r\n        }))\r\n        setNewCardText('');\r\n    }\r\n    const cancelCard = () =>{\r\n        setAddCard(false)\r\n    }\r\n    const changeTitle = () => {\r\n        setEditTitle(true)\r\n    }\r\n\r\n    const doneEditingTitle = () =>{\r\n        setEditTitle(false);\r\n        dispatch(addListAction.updateTitle({\r\n            listId:props.listId,\r\n            index:props.index,\r\n            title:title\r\n        }))\r\n    }\r\n\r\n    const deleteList = () =>{\r\n        dispatch(addListAction.deleteList(\r\n            props.index\r\n        ))\r\n\r\n        props.onDeleteList()\r\n    }\r\n    const [title,setTitle] = useState(props.title);\r\n    const [editTitle,setEditTitle] = useState(false);\r\n\r\n \r\n         \r\n    return(\r\n        <Draggable draggableId={props.listId.toString()} index={props.index}>\r\n            {(provided, snapshot) => (\r\n        <div className=\"Container\"\r\n        ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}>\r\n            {!editTitle && <div className=\"Title\" onClick={changeTitle}>{title}</div>}\r\n            {editTitle && <div className=\"TitleEdit\" > <input type=\"text\" className=\"titleTextBox\" value={title} onChange={(e)=> setTitle(e.target.value)}/>\r\n          <FontAwesomeIcon icon={faCheck} onClick={doneEditingTitle} />\r\n            <FontAwesomeIcon icon={faTrash} onClick={deleteList} />\r\n            \r\n            </div>}\r\n            <Droppable droppableId={props.listId}>\r\n            {(provided, _snapshot) => (\r\n                <div ref={provided.innerRef}>\r\n            {cards && cards.map((card,index)=>(\r\n                <Card key={card.cardId} index={index} listId={props.listId} cardId={card.cardId} onDelete={()=>{setCardDelted(true)}} text={card.text}/>\r\n            ))}\r\n            \r\n            {provided.placeholder}\r\n            </div>\r\n            )}\r\n            </Droppable>\r\n            {\r\n                addCard && \r\n                <TextEditor setTextField={(e)=> setNewCardText(e.target.value)} value={newCardText} firstButtonClick={addCardToList} secondButtonClick={cancelCard } firstButtonText=\"Add Card\" secondButtonText=\"Cancel\"/>\r\n                \r\n            }\r\n            <div className=\"ButtonContainer\">\r\n            <button className=\"Button\" onClick={addNewCard}>Add New Card</button>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default CardContainer;","import './styles/lists.css'\r\nimport React,{useState} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {DragDropContext,Droppable} from 'react-beautiful-dnd';\r\n\r\nimport CardContainer from './CardContainer';\r\nimport * as addListsAction from '../store/actions/addLists';\r\nimport * as addCardAction from '../store/actions/addCard';\r\nconst Lists = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const addNewList = () => {\r\n        dispatch(addListsAction.addLists({\r\n            listId:Date.now(),\r\n            title:'title'\r\n        }))\r\n    }\r\n    const [listDeleted,setListDeleted] = useState(false);\r\n    if(listDeleted)\r\n    setListDeleted(false)\r\n    const lists = useSelector(state => state.lists.lists)\r\n    const dragEnd = ({ source, destination, type }) => {\r\n        \r\n        if(!destination)\r\n        return ;\r\n        if(type === \"COLUMN\"){\r\n            if(source.index !== destination.index){\r\n                dispatch(addListsAction.moveLists({\r\n                    oldListIndex:source.index,\r\n                    newListIndex:destination.index\r\n                }))\r\n            }\r\n            return\r\n        }\r\n\r\n        if(source.index !== destination.index || source.droppableId !== destination.droppableId){\r\n            dispatch(addCardAction.moveCard({\r\n                sourceListId:source.droppableId,\r\n                destinationListId:destination.droppableId,\r\n                oldCardIndex:source.index,\r\n                newCardIndex:destination.index\r\n            }))\r\n        }\r\n    }\r\n    return(\r\n        <DragDropContext onDragEnd={dragEnd} >\r\n            <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"COLUMN\">\r\n                {(provided)=>(\r\n\r\n    \r\n        <div className=\"mainContainer\" {...provided.droppableProps} ref={provided.innerRef}>\r\n            {\r\n                lists.map((list,index)=>{\r\n                    return <CardContainer index={index} key={list.listId.toString()} onDeleteList={()=>setListDeleted(true)}listId={list.listId.toString()} title={list.title}/>\r\n                })\r\n                \r\n            }\r\n            {provided.placeholder}\r\n            <div>\r\n            <button className=\"Button\" onClick={addNewList}>Add New List</button>\r\n            </div>\r\n        </div>\r\n        )}\r\n        </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\n\r\nexport default Lists;","import React from 'react';\n\nimport './App.css';\nimport {useDispatch} from 'react-redux';\n\nimport * as addLists from './store/actions/addLists';\n\nimport Lists from './components/Lists'\n\n\nfunction App() {\n  \n  const dispatch=useDispatch();\n\n    \n    dispatch(addLists.addLists({\n        listId:Date.now(),\n        title:'Title'\n    }))\n\n  return (\n    <div className=\"App\">\n        \n        <Lists/>\n        \n    </div>\n  );\n}\n\nexport default App;\n","import {ADD_LISTS, MOVE_LISTS,UPDATE_TITLE,DELETE_LISTS}  from '../actions/addLists'\r\n\r\nconst intialState = {\r\n    lists:[]\r\n}\r\n\r\nexport default (state = intialState,action)=>{\r\n    switch(action.type){\r\n        case ADD_LISTS:\r\n\r\n            return{\r\n                ...state,\r\n                lists:state.lists.concat(action.payload)\r\n            }\r\n        case MOVE_LISTS:\r\n                const newList = state.lists;\r\n                const [removedListItems] = newList.splice(action.oldListIndex,1);\r\n                newList.splice(action.payload.newListIndex,0,removedListItems);\r\n                return { \r\n                    lists : newList\r\n                }\r\n        case UPDATE_TITLE:\r\n            const newLists=state.lists;\r\n            const newListItem={\r\n                listId:action.payload.listId,\r\n                title:action.payload.title\r\n            }\r\n            newLists.splice(action.payload.index,1,newListItem);\r\n            return{\r\n                ...state,\r\n                lists:newLists\r\n            }\r\n            case DELETE_LISTS:\r\n                const lists = state.lists;\r\n                console.log(lists)\r\n                lists.splice(action.index,1)\r\n                return{\r\n                  ...state,\r\n                  lists:lists\r\n                }\r\n       default :\r\n       return state;\r\n    }\r\n}","import {ADD_CARD,MOVE_CARD,EDIT_CARD, DELETE_CARD}  from '../actions/addCard'\r\nconst intialState = {\r\n    \r\n}\r\n\r\nexport default (state = intialState,action)=>{\r\n    switch(action.type){\r\n        case ADD_CARD:\r\n        let newCards;   \r\n        if(state[action.listId]) \r\n          newCards =state[action.listId].concat(action.payload)\r\n          else\r\n          newCards=[].concat(action.payload)\r\n            return{\r\n                ...state,\r\n                [action.listId]:newCards\r\n            }\r\n          case MOVE_CARD:\r\n          const  {oldCardIndex,newCardIndex,sourceListId,destinationListId} = action.payload\r\n          if(sourceListId === destinationListId){\r\n            const newCards = state[sourceListId];\r\n            const [removedCards] = newCards.splice(oldCardIndex,1);\r\n            newCards.splice(newCardIndex,0,removedCards);\r\n            return{\r\n              ...state,\r\n              [sourceListId]:newCards\r\n            }\r\n          }\r\n\r\n          const sourceCards= state[sourceListId];\r\n          const [removedCard] = sourceCards.splice(oldCardIndex,1);\r\n          const destinationCards = state[destinationListId]?state[destinationListId]:[];\r\n          \r\n          destinationCards.splice(newCardIndex,0,removedCard);\r\n          return{...state,\r\n          [sourceListId]:sourceCards,\r\n        [destinationListId]:destinationCards\r\n      }\r\n      case EDIT_CARD:\r\n        const newCard=state[action.payload.listId];\r\n            const newCardItem={\r\n                cardId:action.payload.cardId,\r\n                text:action.payload.text\r\n            }\r\n            newCard.splice(action.payload.index,1,newCardItem);\r\n            return{\r\n              ...state,\r\n                [action.payload.listId]:newCard\r\n            }\r\n          case DELETE_CARD:\r\n            const cards = state[action.payload.listId];\r\n            cards.splice(action.payload.index,1)\r\n            return{\r\n              ...state,\r\n              [action.payload.listId]:cards\r\n            }\r\n          default:\r\n          return state\r\n    }\r\n  \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { combineReducers, createStore } from \"redux\";\nimport {Provider} from 'react-redux';\n\nimport addLists from './store/reducer/addLists';\nimport addCard from './store/reducer/addCard';\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst rootReducer = combineReducers({\n  lists:addLists ,cards:addCard \n})\n\nconst store =createStore(rootReducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}